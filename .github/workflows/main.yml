name: Frontend CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      NEXT_PUBLIC_API_URL: http://194.163.148.34:8000/api/v1
      NEXT_PUBLIC_FIREBASE_API_KEY: ${{ secrets.NEXT_PUBLIC_FIREBASE_API_KEY }}
      NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN: ${{ secrets.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN }}
      NEXT_PUBLIC_FIREBASE_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_PROJECT_ID }}
      NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET: ${{ secrets.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET }}
      NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID }}
      NEXT_PUBLIC_FIREBASE_APP_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_APP_ID }}
      NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID }}
      NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
      NEXTAUTH_URL: https://property.infiniasync.com  # Change from rental to property
    steps:
    - uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: |
        # Try npm ci first, fallback to npm install if lock file is out of sync
        npm ci || npm install

    - name: Debug ESLint Setup  # NEW STEP: Add this
      run: |
        echo "Node version:"
        node -v
        echo "NPM version:"
        npm -v
        echo "ESLint version and dependencies:"
        npm list eslint
        echo "Sample ESLint config (from package.json scripts):"
        cat package.json | grep "lint"
        echo "Full ESLint config:"
        cat .eslintrc.json || echo "No .eslintrc.json found"

    - name: Run lint
      run: npm run lint

    - name: Build application
      run: npm run build
      env:
        NODE_ENV: production

    - name: Check build output
      run: |
        if [ -d ".next" ]; then
          echo "✅ Build successful - .next directory created"
          ls -la .next/
        else
          echo "❌ Build failed - .next directory not found"
          exit 1
        fi

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Deploy to VPS
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          # Ensure Node.js is installed
          if ! command -v node &> /dev/null; then
            echo "Node.js not found, installing..."
            curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
            sudo apt-get install -y nodejs
          fi
          
          # Check Node.js version
          node -v
          npm -v
          
          cd /var/www/infinia-pms/frontend
          
          # Clean up any local changes and cache files
          git reset --hard HEAD
          git clean -fd
          
          # Remove node_modules and build artifacts
          rm -rf node_modules
          rm -rf .next
          rm -rf out
          
          # Remove the unused pnpm lock file to avoid confusion
          rm -f pnpm-lock.yaml
          
          # Stash any remaining local changes
          git stash
          
          # Pull latest changes
          git pull origin main
          
          # Install dependencies
          npm ci || npm install
          
          # Instead of creating .env.local directly with hardcoded values, copy from .env.production
          git checkout .env.production
          cp .env.production .env.local
          
          # Build the application with explicit environment variables
          NEXT_PUBLIC_API_URL=https://property.infiniasync.com/api/v1 \
          NEXT_PUBLIC_FIREBASE_API_KEY=${{ secrets.NEXT_PUBLIC_FIREBASE_API_KEY }} \
          NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN=${{ secrets.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN }} \
          NEXT_PUBLIC_FIREBASE_PROJECT_ID=${{ secrets.NEXT_PUBLIC_FIREBASE_PROJECT_ID }} \
          NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET=${{ secrets.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET }} \
          NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID }} \
          NEXT_PUBLIC_FIREBASE_APP_ID=${{ secrets.NEXT_PUBLIC_FIREBASE_APP_ID }} \
          NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID=${{ secrets.NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID }} \
          NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }} \
          NEXTAUTH_URL=https://property.infiniasync.com \
          npm run build
          
          # Verify build was successful and check for specific files
          if [ ! -d ".next" ]; then
            echo "❌ Build failed - .next directory not found"
            exit 1
          fi
          
          if [ ! -f ".next/prerender-manifest.json" ]; then
            echo "❌ Build failed - prerender-manifest.json not found"
            exit 1
          fi
          
          echo "✅ Build successful - .next directory created with required files"
          ls -la .next/
          
          # Install PM2 globally if not already installed
          if ! command -v pm2 &> /dev/null; then
            echo "PM2 not found, installing..."
            sudo npm install -g pm2
          fi
          
          # Stop any existing instance
          pm2 stop frontend || true
          
          # Start the application with explicit working directory and port configuration
          cd /var/www/infinia-pms/frontend && pm2 start npm --name "frontend" -- start -- -p 3000 -H 0.0.0.0
          
          # After build, create a PM2 ecosystem file for runtime env
          cat << EOF > ecosystem.config.js
          module.exports = {
            apps: [{
              name: 'frontend',
              script: 'npm',
              args: 'start -- -p 3000 -H 0.0.0.0',
              cwd: '/var/www/infinia-pms/frontend',
              env: {
                NODE_ENV: 'production',
                NEXTAUTH_URL: 'https://property.infiniasync.com',
                NEXT_PUBLIC_API_URL: 'https://property.infiniasync.com/api/v1/',
                NEXTAUTH_SECRET: '${{ secrets.NEXTAUTH_SECRET }}',
                NEXT_PUBLIC_FIREBASE_API_KEY: '${{ secrets.NEXT_PUBLIC_FIREBASE_API_KEY }}',
                NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN: '${{ secrets.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN }}',
                NEXT_PUBLIC_FIREBASE_PROJECT_ID: '${{ secrets.NEXT_PUBLIC_FIREBASE_PROJECT_ID }}',
                NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET: '${{ secrets.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET }}',
                NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID: '${{ secrets.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID }}',
                NEXT_PUBLIC_FIREBASE_APP_ID: '${{ secrets.NEXT_PUBLIC_FIREBASE_APP_ID }}',
                NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID: '${{ secrets.NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID }}'
              }
            }]
          }
          EOF

          # Stop existing instance
          pm2 stop frontend || true
          pm2 delete frontend || true

          # Start with ecosystem file (loads runtime env)
          pm2 start ecosystem.config.js

          # Save and verify
          pm2 save
          pm2 status
          pm2 logs frontend --lines 20